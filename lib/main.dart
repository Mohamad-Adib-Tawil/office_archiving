import 'package:flutter/material.dart';
import 'package:office_archiving/cubit/item_section_cubit/item_section_cubit.dart';
import 'package:office_archiving/cubit/section_cubit/section_cubit.dart';
import 'package:office_archiving/pages/splash.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:office_archiving/l10n/app_localizations.dart';
import 'package:office_archiving/cubit/locale_cubit/locale_cubit.dart';
import 'package:office_archiving/cubit/theme_cubit/theme_cubit.dart';
import 'package:flutter/services.dart';
import 'package:office_archiving/helper/pdf_viwer.dart';
import 'package:office_archiving/helper/text_viewer.dart';
import 'package:open_file/open_file.dart';

import 'service/sqlite_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await DatabaseService.initDatabase();
 
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  static const _channel = MethodChannel('com.werewolf.office_archiving/open_file');
  final GlobalKey<NavigatorState> _navigatorKey = GlobalKey<NavigatorState>();

  @override
  void initState() {
    super.initState();
    _channel.setMethodCallHandler((call) async {
      if (call.method == 'openFile') {
        final String path = call.arguments as String;
        _routeToViewer(path);
      }
    });
  }

  void _routeToViewer(String path) {
    final lower = path.toLowerCase();
    if (lower.endsWith('.pdf')) {
      _navigatorKey.currentState?.push(
        MaterialPageRoute(builder: (_) => MyPdfViewer(filePath: path)),
      );
    } else if (lower.endsWith('.txt')) {
      _navigatorKey.currentState?.push(
        MaterialPageRoute(builder: (_) => TextViewer(filePath: path)),
      );
    } else if (lower.endsWith('.docx') || lower.endsWith('.xlsx')) {
      // Fallback: open with system app for now
      OpenFile.open(path);
    } else {
      // Unknown type: try system handler
      OpenFile.open(path);
    }
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(create: (context) => SectionCubit(DatabaseService.instance)),
        BlocProvider(create: (context) => ItemSectionCubit(DatabaseService.instance)),
        BlocProvider(create: (context) => LocaleCubit()),
        BlocProvider(create: (context) => ThemeCubit()),
      ],
      child: Builder(builder: (context) {
        final locale = context.select((LocaleCubit c) => c.state);
        final theme = context.select((ThemeCubit c) => c.themeData);
        return MaterialApp(
          navigatorKey: _navigatorKey,
          debugShowCheckedModeBanner: false,
          theme: theme,
          // Localization setup (generated by gen_l10n)
          localizationsDelegates: AppLocalizations.localizationsDelegates,
          supportedLocales: AppLocalizations.supportedLocales,
          locale: locale,
          onGenerateTitle: (context) => AppLocalizations.of(context).appTitle,
          home: const SplashView(),
        );
      }),
    );
  }
}


